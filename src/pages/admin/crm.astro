---
import Base from '@/layouts/Base.astro';
import { readFile, writeFile } from 'fs/promises';
import path from 'path';

interface EstimationRequest {
  id: string;
  timestamp: string;
  type: 'ia' | 'traditional';
  clientInfo: {
    nom: string;
    email: string;
    telephone: string;
    ville?: string;
    propertyType?: string;
    surface?: number;
    message?: string;
  };
  estimationData?: {
    estimatedValue?: number;
    confidenceRange?: { min: number; max: number };
    marketTrend?: string;
  };
  status: 'pending' | 'contacted' | 'completed';
  notes?: string;
  lastContact?: string;
  assignedTo?: string;
}

// Récupérer les demandes d'estimation
let requests: EstimationRequest[] = [];
try {
  const filePath = path.join(process.cwd(), 'src', 'data', 'estimation-requests.json');
  const data = await readFile(filePath, 'utf-8');
  requests = JSON.parse(data);
} catch (error) {
  console.log('Aucune demande trouvée ou erreur de lecture');
}

// Calcul des métriques
const totalRequests = requests.length;
const pendingRequests = requests.filter(r => r.status === 'pending').length;
const contactedRequests = requests.filter(r => r.status === 'contacted').length;
const completedRequests = requests.filter(r => r.status === 'completed').length;

// Métriques temporelles (7 derniers jours)
const sevenDaysAgo = new Date();
sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
const recentRequests = requests.filter(r => new Date(r.timestamp) >= sevenDaysAgo);

// Calcul de la valeur totale des estimations
const totalEstimatedValue = requests
  .filter(r => r.estimationData?.estimatedValue)
  .reduce((sum, r) => sum + (r.estimationData?.estimatedValue || 0), 0);

// Recherche et filtrage
const searchTerm = '';
const statusFilter = 'all';
const typeFilter = 'all';
---

<Base title="CRM - Gestion des demandes d'estimation | L'Agence de Voglans">
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">CRM - Demandes d'estimation</h1>
            <p class="mt-1 text-sm text-gray-600">Gérez vos prospects et demandes d'estimation</p>
          </div>
          <div class="flex items-center gap-4">
            <button id="export-btn" class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors duration-200 flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l4-4m-4 4l-4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Exporter
            </button>
            <button id="refresh-btn" class="bg-white text-gray-700 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors duration-200 flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Actualiser
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Dashboard Métriques -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total demandes</p>
              <p class="text-2xl font-semibold text-gray-900">{totalRequests}</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">En attente</p>
              <p class="text-2xl font-semibold text-gray-900">{pendingRequests}</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Contactés</p>
              <p class="text-2xl font-semibold text-gray-900">{contactedRequests}</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Terminés</p>
              <p class="text-2xl font-semibold text-gray-900">{completedRequests}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Métriques avancées -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="text-sm font-medium text-gray-600 mb-2">Valeur totale estimée</div>
          <div class="text-2xl font-bold text-primary">{totalEstimatedValue.toLocaleString('fr-FR')} €</div>
          <div class="text-sm text-gray-500 mt-1">Sur {requests.filter(r => r.estimationData?.estimatedValue).length} estimations</div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="text-sm font-medium text-gray-600 mb-2">7 derniers jours</div>
          <div class="text-2xl font-bold text-gray-900">{recentRequests.length}</div>
          <div class="text-sm text-gray-500 mt-1">Nouvelles demandes</div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div class="text-sm font-medium text-gray-600 mb-2">Taux de conversion</div>
          <div class="text-2xl font-bold text-green-600">
            {totalRequests > 0 ? Math.round((completedRequests / totalRequests) * 100) : 0}%
          </div>
          <div class="text-sm text-gray-500 mt-1">Demandes terminées</div>
        </div>
      </div>

      <!-- Recherche et filtres -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <div class="flex flex-col md:flex-row gap-4">
          <div class="flex-1">
            <label class="block text-sm font-medium text-gray-700 mb-2">Rechercher</label>
            <input type="text" id="search-input" placeholder="Nom, email, ville..."
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
            <select id="status-filter" class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary">
              <option value="all">Tous les statuts</option>
              <option value="pending">En attente</option>
              <option value="contacted">Contacté</option>
              <option value="completed">Terminé</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
            <select id="type-filter" class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary">
              <option value="all">Tous les types</option>
              <option value="ia">Estimation IA</option>
              <option value="traditional">Traditionnelle</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Tableau des demandes -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bien</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estimation</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="requests-table">
              {requests.map((request) => (
                <tr class="hover:bg-gray-50" data-id={request.id}>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0">
                        <div class="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                          <span class="text-sm font-medium text-primary">
                            {request.clientInfo.nom.charAt(0).toUpperCase()}
                          </span>
                        </div>
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">{request.clientInfo.nom}</div>
                        <div class="text-sm text-gray-500">{request.clientInfo.email}</div>
                        <div class="text-sm text-gray-500">{request.clientInfo.telephone}</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">
                      {request.clientInfo.propertyType} • {request.clientInfo.surface}m²
                    </div>
                    <div class="text-sm text-gray-500">{request.clientInfo.ville}</div>
                    <div class="text-xs text-gray-400 mt-1">
                      {request.type === 'ia' ? '🤖 Estimation IA' : '📋 Traditionnelle'}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {request.estimationData ? (
                      <div>
                        <div class="text-sm font-medium text-primary">
                          {request.estimationData.estimatedValue?.toLocaleString('fr-FR')} €
                        </div>
                        <div class="text-xs text-gray-500">
                          {request.estimationData.confidenceRange ?
                            `${request.estimationData.confidenceRange.min.toLocaleString('fr-FR')} - ${request.estimationData.confidenceRange.max.toLocaleString('fr-FR')} €` :
                            'N/A'
                          }
                        </div>
                        <div class="text-xs text-gray-400">
                          📈 {request.estimationData.marketTrend || 'N/A'}
                        </div>
                      </div>
                    ) : (
                      <span class="text-sm text-gray-400">À déterminer</span>
                    )}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <select class="status-select text-xs font-semibold rounded-full px-2 py-1 border-0 focus:ring-2 focus:ring-primary"
                            data-id={request.id}
                            data-current-status={request.status}>
                      <option value="pending" selected={request.status === 'pending'}>En attente</option>
                      <option value="contacted" selected={request.status === 'contacted'}>Contacté</option>
                      <option value="completed" selected={request.status === 'completed'}>Terminé</option>
                    </select>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <div>{new Date(request.timestamp).toLocaleDateString('fr-FR')}</div>
                    <div class="text-xs">{new Date(request.timestamp).toLocaleTimeString('fr-FR')}</div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex items-center gap-2">
                      <button class="text-primary hover:text-primary/80" title="Voir détails">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                      </button>
                      <button class="text-green-600 hover:text-green-800" title="Contacter">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.83 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                        </svg>
                      </button>
                      <button class="text-gray-600 hover:text-gray-800" title="Notes">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {requests.length === 0 && (
          <div class="text-center py-16">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <h3 class="mt-4 text-lg font-medium text-gray-900">Aucune demande d'estimation</h3>
            <p class="mt-2 text-gray-500">Les demandes d'estimation apparaîtront ici.</p>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Modal de détails -->
  <div id="detail-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-4xl bg-white rounded-lg shadow-lg">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900">Détails de la demande</h3>
          <button id="close-modal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="modal-content" class="text-sm text-gray-600">
          <!-- Contenu du modal sera injecté ici -->
        </div>
      </div>
    </div>
  </div>

  <script>
    // Gestion du CRM
    document.addEventListener('DOMContentLoaded', () => {
      // Gestionnaire de recherche et filtres
      const searchInput = document.getElementById('search-input');
      const statusFilter = document.getElementById('status-filter');
      const typeFilter = document.getElementById('type-filter');
      const requestsTable = document.getElementById('requests-table');

      function filterRequests() {
        const searchTerm = searchInput?.value.toLowerCase() || '';
        const statusValue = statusFilter?.value || 'all';
        const typeValue = typeFilter?.value || 'all';

        const rows = requestsTable?.querySelectorAll('tr[data-id]') || [];

        rows.forEach(row => {
          const id = row.getAttribute('data-id');
          const cells = row.querySelectorAll('td');
          const clientText = cells[0]?.textContent.toLowerCase() || '';
          const propertyText = cells[1]?.textContent.toLowerCase() || '';
          const statusCell = cells[3]?.querySelector('.status-select');
          const statusValueRow = statusCell?.value || 'pending';

          const matchesSearch = clientText.includes(searchTerm) || propertyText.includes(searchTerm);
          const matchesStatus = statusValue === 'all' || statusValueRow === statusValue;
          const matchesType = typeValue === 'all' || row.textContent.toLowerCase().includes(typeValue === 'ia' ? 'estimation ia' : 'traditionnelle');

          if (matchesSearch && matchesStatus && matchesType) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      }

      searchInput?.addEventListener('input', filterRequests);
      statusFilter?.addEventListener('change', filterRequests);
      typeFilter?.addEventListener('change', filterRequests);

      // Gestion des changements de statut
      const statusSelects = document.querySelectorAll('.status-select');
      statusSelects.forEach(select => {
        select.addEventListener('change', async (e) => {
          const requestId = e.target.getAttribute('data-id');
          const newStatus = e.target.value;

          try {
            const response = await fetch('/api/estimation-requests', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                action: 'update_status',
                id: requestId,
                status: newStatus
              })
            });

            if (response.ok) {
              console.log('Statut mis à jour');
              // Recharger la page pour voir les changements
              setTimeout(() => window.location.reload(), 500);
            } else {
              console.error('Erreur lors de la mise à jour du statut');
              alert('Erreur lors de la mise à jour du statut');
            }
          } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la mise à jour du statut');
          }
        });
      });

      // Bouton d'export
      document.getElementById('export-btn')?.addEventListener('click', async () => {
        try {
          // Récupérer les données actuelles depuis l'API
          const response = await fetch('/api/estimation-requests');
          const data = await response.json();

          if (data.success) {
            const dataStr = JSON.stringify(data.requests, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

            const exportFileDefaultName = `demandes-estimation-${new Date().toISOString().split('T')[0]}.json`;

            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
          } else {
            alert('Erreur lors de l\'export des données');
          }
        } catch (error) {
          console.error('Erreur d\'export:', error);
          alert('Erreur lors de l\'export');
        }
      });

      // Bouton d'actualisation
      document.getElementById('refresh-btn')?.addEventListener('click', () => {
        window.location.reload();
      });
    });
  </script>
</Base>
